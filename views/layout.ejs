<!DOCTYPE html>
<html>
  <head>
    <title>Orange Holiday Villas</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/layout.css">
    <!--STYLES END-->
  </head>

  <body ng-app>
    <!--<header>
      <div id="header-block" class="container-fluid">
        <a href="/" class="header-block_logo">
          <img src="../images/logo.png" alt="Orange Holiday Villas logo" class="logo-img">
        </a>
        <div class="panel contacts-block clearfix">

        </div>
        <div class="panel message-block">

        </div>
      </div>
    </header>-->
    <header class="row">
      <div class="container-fluid col-lg-12 header-block">
        <div class="row">
          <div class="col-lg-2">
            <a href="/" class="header-block_logo">
              <img src="../images/logo.png" alt="Orange Holiday Villas logo" class="logo-img">
            </a>
          </div>
          <div class="col-lg-7"></div>
          <div class="col-lg-3">
            <div class="row">
              <div class="panel contacts-block"></div>
            </div>
            <div class="row">
              <div class="panel message-block"></div>
            </div>
          </div>
        </div>
      </div>
    </header>

    <div class="row">
      <nav class="navbar navbar-inverse" data-spy="affix" data-offset-top="200">
        <ul class="nav navbar-nav">
          <li class="active"><a href="#">Главная</a></li>
          <li><a href="#" id="ttt">Эксклюзив</a></li>
          <li><a href="#">Долгосрочная<br>аренда</a></li>
          <li><a href="#">Посуточная<br>аренда</a></li>
          <li><a href="#">Продажа</a></li>
          <li><a href="#">Вопросы</a></li>
          <li><a href="#">Контакты</a></li>
          <li><a href="#">Дополнительные<br>услуги</a></li>
          <form class="navbar-form navbar-left" role="search">
            <div class="form-group">
              <input type="text" class="form-control" placeholder="№ объекта">
            </div>
            <button type="submit" class="btn btn-default">Найти</button>
          </form>
        </ul>
      </nav>
    </div>



    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jQuery/jquery.js"></script>
    <script src="/js/dependencies/Bootstrap/bootstrap.js"></script>
    <script src="/js/dependencies/Angular/angular.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
